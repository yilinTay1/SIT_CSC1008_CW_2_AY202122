import os
import sys

class BST:
    root=None

    def put(self, key, val):
        self.root = self.put2(self.root, key, val)

    def put2(self, node, key, val):
        if node is None:
            #key is not in tree, create node and return node to parent
            return Node(key, val)
        if key < node.key:
            # key is in left subtree
            node.left = self.put2(node.left, key, val)
        elif key > node.key:
            # key is in right subtree
            node.right = self.put2(node.right, key, val)
        else:
            node.val = val
        return node
    
    def createTree(self, a):   
        for x in a:
            n = x.split(":")
            self.put(n[0], n[1])
    
    #Create a AVL Tree, you are allowed to create other helper functions
    def createBalancedTree(self, a):
        for x in a:
            n = x.split(":")
            self.insert(n[0], n[1])
    
    def insert(self, key, val):
        self.root = self.insert2(self.root, key, val)

    def insert2(self, node, key, val):
        if not node:
            return Node(key, val)
        elif key < node.key:
            node.left = self.insert2(node.left, key, val)
        else:
            node.right = self.insert2(node.right, key, val)
        node.height = 1 + max(self.getHeight(node.left),self.getHeight(node.right))
        
        # Update the balance factor and balance the tree
        balanceFactor = self.getBalance(node)
        if balanceFactor > 1:
            if key < node.left.key:
                return self.rightRotate(node)
            else:
                node.left = self.leftRotate(node.left)
                return self.rightRotate(node)

        if balanceFactor < -1:
            if key > node.right.key:
                return self.leftRotate(node)
            else:
                node.right = self.rightRotate(node.right)
                return self.leftRotate(node)
        return node

    def leftRotate(self, z):
        y = z.right
        T2 = y.left
        y.left = z
        z.right = T2
        z.height = 1 + max(self.getHeight(z.left),self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),self.getHeight(y.right))
        return y

    def rightRotate(self, z):
        y = z.left
        T3 = y.right
        y.right = z
        z.left = T3
        z.height = 1 + max(self.getHeight(z.left),self.getHeight(z.right))
        y.height = 1 + max(self.getHeight(y.left),self.getHeight(y.right))
        return y

    def getHeight(self, root):
        if not root:
            return 0
        return root.height

    def getBalance(self, root):
        if not root:
            return 0
        return self.getHeight(root.left) - self.getHeight(root.right)
    
    #preOrder Traversal, this should be a recursive function
    def preOrder(self, node):
        if node is None:
            return 0
        else:
            preOrder_A.append(str(node.key)+":"+str(node.val))          
            self.preOrder(node.left)
            self.preOrder(node.right)
        return preOrder_A
        
    #inOrder Traversal, this should be a recursive function
    def inOrder(self, node):
        if node is None:
            return 0
        else:
            self.inOrder(node.left)
            inOrder_A.append(str(node.key)+":"+str(node.val))  
            self.inOrder(node.right)
        return inOrder_A    
    
    #postOrder Traversal, this should be a recursive function
    def postOrder(self, node):
        if node is None:
            return 0
        else:
            self.postOrder(node.left)
            self.postOrder(node.right)
            postOrder_A.append(str(node.key)+":"+str(node.val))  
        return postOrder_A   
    
    #given a key, obtain its value
    def get(self, key):
        temp = self.root
        while temp is not None:
            if temp.key == key:
                return temp.val
            elif temp.key > key:
                temp = temp.left
            else:
                temp = temp.right
        return None
         
    #given a key, find the node and obtain the depth, you are allowed to create other helper functions
    def depth(self, key):
        return self.depth2(self.root, key)
    
    def depth2(self, root, key, current_depth=0):
        if not root:
            return -1
        elif root.key == key:
            return current_depth
        elif key < root.key:
            return self.depth2(root.left, key, current_depth + 1)
        else:
            return self.depth2(root.right, key, current_depth + 1)
        
    #given a key, find the node and obtain the height, you are allowed to create other helper functions
    def height(self, key):
        node = self.root
        while node is not None:
            if node.key == key:
                #return itself
                return self.height2(node)
            elif node.key > key:
                node = node.left
            else:
                node = node.right
                
    def height2(self,node):
        if node is None:
            return -1
        else:
            return  1 + max(self.height2(node.left),self.height2(node.right))
        
    #given a key, find the node and obtain the size, you are allowed to create other helper functions
    def size(self,key):
        return self.size2(self.find(key))

    def size2(self, subtree):          
        if not subtree:
            return 0
        else:
            return 1 + self.size2(subtree.left) + self.size2(subtree.right)
        
    def find(self,key):
        temp = self.root
        while temp is not None:
            if temp.key == key:
                return temp      
            elif temp.key > key:
                temp = temp.left
            else:
                temp = temp.right 
        return None  
    
    #given a key, delete the node, you are allowed to create other helper functions
    def delete(self, k):
        self.root = self._delete(self.root, k)
        return True 

    def _delete(self, node, k):
        if k < node.key:
            node.left = self._delete(node.left, k)
        elif k > node.key:
            node.right = self._delete(node.right, k)
        else:
            if node.left is None:
                return node.right

            if node.right is None:
                return node.left

            delete_node = node
            node = self._min(node.right)
            node.right = self._delete_min(delete_node.right)
            node.left = delete_node.left
        return node

    def _min(self, node):
        if node.left is None:
            return node
        return self._min(node.left)

    def delete_min(self):
        self.root = self._delete_min(self.root)

    def _delete_min(self, node):
        if node.left is None:
            return node.right
        node.left = self._delete_min(node.left)
        return node
    
class Node:
    left = None
    right = None
    key = 0
    val = 0
    
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.height = 1

array = input("Enter a list of key:value pairs separated by commas:\n")
array = [str(x) for x in array.split(",")]

bst = BST()
bst.createTree(array)

###testcase 0 (get())
for i in range(2):
    key1 = input("Input key for get() method:\n")
    if key1 != '-':
        print("The value of", key1, "is", bst.get(key1))

###testcase 1 (size(),depth(),height())
key1 = input("Input key for size() method:\n")
if key1 != '-':
    print("The size of", key1, "is", bst.size(key1))

key1 = input("Input key for depth() method:\n")
if key1 != '-':
    print("The depth of", key1, "is", bst.depth(key1))
    
key1 = input("Input key for height() method:\n")
if key1 != '-':
    print("The height of", key1, "is", bst.height(key1))
    
print()

###testcase 2 (preOrder(), inOrder(), postOrder())
preOrder_A = []
inOrder_A = []
postOrder_A = []
print("The preOrder traversal is", bst.preOrder(bst.root))
print("The inOrder traversal is", bst.inOrder(bst.root))
print("The postOrder traversal is", bst.postOrder(bst.root))
print()

###testcase 3 delete()
for i in range(2):
    key1 = input("Input key for delete() method:\n")
    if key1 != '-':
        preOrder_A = []
        inOrder_A = []
        postOrder_A = []
        
        print("Deleting", key1, "is", bst.delete(key1))
        print("The preOrder traversal is", bst.preOrder(bst.root))
        print("The inOrder traversal is", bst.inOrder(bst.root))
        print("The postOrder traversal is", bst.postOrder(bst.root))

###testcase 4 createbalancedTree()
key1 = input("Test balanced Tree? \n")
bst1 = BST()

if key1 == 'Y':
    preOrder_A = []
    inOrder_A = []
    postOrder_A = []
    
    bst1.createBalancedTree(array)
    print("The preOrder traversal is", bst1.preOrder(bst1.root))
    print("The inOrder traversal is", bst1.inOrder(bst1.root))
    print("The postOrder traversal is", bst1.postOrder(bst1.root))
